{
    "parameters": [
        {
            "meta": {
                "validation": {
                    "required": true
                },
                "description": "ID of the contact to update.",
                "displayName": "Contact ID",
                "displayType": "text",
                "placeholder": "Enter the Contact ID"
            },
            "name": "id"
        }
    ],
    "getMoreParameters": {
        "definition": {
            "qs": {},
            "url": "https://{{secrets.company}}.freshdesk.com/api/v2/contact_fields",
            "method": "get",
            "headers": {
                "Content-Type": "application/json",
                "Authorization": "Basic convertBufferBase64String({{secrets.api_key}}:X)"
            },
            "response": {
                "error": {
                    "code": "{{response.data.code}}",
                    "message": "{{response.data.description}}"
                },
                "output": "{{response.data}}"
            },
            "transform": {
                "output": "const staticField={name:'unique_external_id',meta:{displayName:'Unique External ID',displayType:'text',placeholder:'Enter Unique External ID',validation:{required:true}}};const skip=new Set(['requester','company']);const typeMap={text:'text',textarea:'textarea',dropdown:'select',auto_complete:'multitext',multi_select_dropdown:'multiselect',radio:'select',number:'number'};const seen=new Set([staticField.name]);const result=[staticField,...output.map(ele=>{if(seen.has(ele.name)||skip.has(ele.name))return null;seen.add(ele.name);const displayType=ele.choices?'select':(typeMap[ele.type]||'text');const obj={name:ele.name,meta:{displayName:ele.label,displayType,placeholder:`${ele.choices?'Select':'Enter'} ${ele.label}`,validation:{required:false}}};if(ele.name==='priority'){obj.meta.displayType='select';obj.meta.options=[{label:'Low',value:1},{label:'Medium',value:2},{label:'High',value:3},{label:'Urgent',value:4}];}else if(ele.choices){obj.meta.htmlProps={allowDynamic:true};if(Array.isArray(ele.choices))obj.meta.options=ele.choices.map(c=>({label:c,value:c}));else obj.meta.options=Object.entries(ele.choices).map(([k,v])=>({label:v,value:k}));}return obj;}).filter(Boolean)];return result;"
            }
        }
    },
    "config": {
        "url": "integrations/parameters",
        "body": {
            "name": "freshdesk",
            "secret": "{{parameters.secret}}",
            "resource": "contact",
            "operation": "contact.update",
            "loadParametersMethod": "getMoreParameters"
        },
        "method": "post",
        "urlType": "parameters"
    },
    "definition": {
        "qs": {},
        "url": "https://{{secrets.company}}.freshdesk.com/api/v2/contacts/{{parameters.id}}",
        "body": "{{parameters}}",
        "method": "put",
        "headers": {
            "Content-Type": "application/json",
            "Authorization": "Basic convertBufferBase64String({{secrets.api_key}}:X)"
        },
        "response": {
            "error": {
                "code": "{{response.status}}",
                "message": "{{response.data.description}}"
            },
            "output": "{{response.data}}"
        }
    }
}
