{
    "name": "shopify",
    "slug": "blt-int.shopify",
    "description": {
        "trigger": "Shopify is a leading e-commerce platform that allows individuals and businesses to create their own online stores to sell products. It provides a range of tools and services to help users design, set up, and manage their stores. ",
        "integration": "Shopify is a leading e-commerce platform that allows individuals and businesses to create their own online stores to sell products. It provides a range of tools and services to help users design, set up, and manage their stores. "
    },
    "icon": "https://cdn.pixelbin.io/v2/fyndcloud/original/Temporal/Uploads/bolt/undefined/images/shopify-logo_1728552474313.svg",
    "activity_type": "customActivity",
    "trigger_type": "CloudTrigger",
    "documentation": "# Shopify Project Documentation\nWelcome to the Shopify project documentation. This guide aims to help you navigate through the project, understand its structure, and get you up and running with development.\n\n## Table of Contents\n- [Project Overview](#project-overview)\n- [Folder Structure](#folder-structure)\n\n## Project Overview\nThis section should provide a high-level overview of the project, including its purpose, key features, and any other relevant information that a newcomer might need to know.\n\n## Folder Structure\nExplain the organization of your project's directories and files. This helps contributors understand where to find things and where to place new files.\n\n## Products  \n\n### Schema: Products  \nProducts in Shopify represent items available for sale in a store. Each product includes details such as title, description, price, variants, and inventory status.  \n\n### Operations: Products  \n- **Create a Product**  \n  - Add a new product to the store with specified details.  \n\n- **Update a Product**  \n  - Modify details of an existing product.  \n\n- **Delete a Product**  \n  - Permanently remove a product from the store.  \n\n- **Get a Product**  \n  - Retrieve details of a specific product.  \n\n- **Find Product by Title and Handle**  \n  - Locate a product using its title or handle.  \n\n- **Find Product Variant by SKU**  \n  - Retrieve a product variant using its SKU.  \n\n- **Create Product Variant**  \n  - Add a new variant to an existing product.  \n\n- **Find Product Variant by Title**  \n  - Search for a product variant using its title.  \n\n\n- **Update Product Variant**  \n  - Update a variant of an existing product. \n\n- **Update Product Variant**  \n  - Modify details of an existing product variant.  \n\n\n## Collections\n\n### Schema: Collections  \nCollections in Shopify allow you to organize products into groups, making it easier for customers to browse and purchase related items. Collections can be manual or automated.\n\n### Operations: Collections  \n- **Get a Collection**  \n  - Retrieve details of a specific collection.  \n\n- **Get Collection Products**  \n  - Fetch a list of products associated with a specific collection.  \n\n- **Create a Custom Collection**  \n  - Create a new custom collection with specified details.  \n\n- **Get a List of Custom Collections**  \n  - Retrieve a list of all custom collections in the store.  \n\n- **Update a Custom Collection**  \n  - Modify details of an existing custom collection.  \n\n- **Delete a Custom Collection**  \n  - Remove a custom collection from the store.  \n\n\n## Orders  \n\n### Schema: Orders  \nOrders in Shopify represent customer purchases, including details such as order items, billing, shipping, and fulfillment status.  \n\n### Operations: Orders  \n- **Create an Order**  \n  - Create a new order with specified details.  \n\n- **Cancel an Order**  \n  - Cancel an existing order and optionally issue a refund.  \n\n- **Get Order by Order ID**  \n  - Retrieve order details using the order number.  \n\n- **List Orders**  \n  - Fetch a list of all orders in the store.  \n\n- **Delete an Order**  \n  - Permanently remove an order from the store.  \n\n- **Close an Order**  \n  - Mark an order as completed.  \n\n- **Reopen an Order**  \n  - Reopen a previously closed order.  \n\n- **Update an Order**  \n  - Modify details of an existing order.  \n\n- **Create Draft Order**  \n  - Create a draft order before finalizing the purchase.  \n\n- **Find an Order by Name**  \n  - Search for an order using its name.  \n\n- **Add Line Items to an Order**  \n  - Add line items to order details using the order ID.  \n\n\n## Customers  \n\n### Schema: Customers  \nCustomers in Shopify represent users who have made purchases or interacted with your store. Customer records include essential details such as `id`, `email`, `first_name`, `last_name`, and order history.\n\n### Operations: Customers  \n- **Create a Customer**  \n  - Add a new customer with specified details.  \n\n- **Send Account Invite**  \n  - Send an invitation email to a customer to activate their account.  \n\n- **Get Details of the Customer List**  \n  - Retrieve a list of all customers in the store.  \n\n- **Get a Customer**  \n  - Fetch details of a specific customer by ID.  \n\n- **Get Customer Orders**  \n  - Retrieve all orders associated with a specific customer.  \n\n- **Get Customer Count**  \n  - Get the total number of customers in the store.  \n\n- **Update a Customer**  \n  - Modify details of an existing customer.  \n\n- **Delete a Customer**  \n  - Remove a customer from the store.  \n\n- **Add Tag to Customer**  \n  - Assign a tag to a customer for better organization.  \n\n- **Remove Tag from Customer**  \n  - Remove a previously assigned tag from a customer.  \n\n- **Find Customer by Email**  \n  - Search for a customer using their email address.  \n\n- **Find Customer by Name**  \n  - Search for a customer using their name.  \n\n\n## Fulfillment  \n\n### Schema: Fulfillment  \nFulfillment in Shopify refers to the process of preparing and shipping orders to customers. Fulfillment records track order shipments and statuses.  \n\n### Operations: Fulfillment   \n\n- **Get Fulfillment Orders by Order ID**  \n  - Retrieve fulfillment orders associated with a specific order.  \n\n## Metafields  \n\n### Schema: Metafields  \nMetafields in Shopify allow you to store additional custom data for various store resources such as products, orders, and customers.  \n\n### Operations: Metafields  \n- **Get Metafields**  \n  - Retrieve metafields associated with a specific resource.  \n\n\n## Blogs\n\n### Schema: Blogs  \nBlogs represent collections of articles in your Shopify store. A blog can contain multiple entries, each with a title, content, and metadata.\n\n### Operations: Blogs  \n- **Get Blog Listing**  \n  - Retrieve a list of blogs available in the store.  \n\n- **Create Blog**  \n  - Create a new blog with specified details.  \n\n- **Create Blog Entry**  \n  - Add a new entry (article) to a specific blog.  \n\n## Transactions  \n\n### Schema: Transactions  \nTransactions in Shopify represent payments, refunds, and adjustments made on orders. Each transaction includes details such as amount, status, payment method, and order association.  \n\n### Operations: Transactions   \n\n- **Find Order Transactions**  \n  - Retrieve a list of transactions associated with a specific order.  \n\n\n## Error Handling\nThis section would detail common error codes and their meanings, as well as tips for troubleshooting and handling errors in API responses.\n\n## Conclusion\nThis documentation provides a foundational overview of interacting with the Shopify API. For more detailed information on each resource, refer to the official Shopify API documentation.\n\n\n",
    "meta": {
        "ai_description": {
            "trigger": "The Shopify activity allows you to automate workflows by interacting with your Shopify store through various webhooks, such as customer, order, product, collection, refund, cart, and inventory, and should be used when you need to trigger actions based on specific events in your Shopify store.",
            "integration": "The Shopify activity enables automation workflows to interact with Shopify's e-commerce platform, allowing users to manage online stores by creating and updating products, collections, and orders, handling customer data, and executing custom API calls; it is ideal for automating tasks related to store management, inventory updates, order processing, and customer engagement."
        }
    }
}
