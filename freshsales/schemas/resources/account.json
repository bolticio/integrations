{
    "parameters": [
        {
            "meta": {
                "validation": {
                    "required": true
                },
                "description": "Enter the ID of the account you want to delete.",
                "displayName": "Account ID",
                "displayType": "text",
                "placeholder": "Enter the Account ID"
            },
            "name": "id"
        }
    ],
    "getAccountViews": {
        "definition": {
            "qs": {},
            "url": "{{secrets.api_url}}/api/sales_accounts/filters",
            "method": "get",
            "headers": {
                "Authorization": "Token token={{secrets.api_key}}"
            },
            "response": {
                "error": {
                    "code": "{{response.data.errors.code}}",
                    "message": "{{response.data.errors.message}}"
                },
                "output": "{{response.data.filters}}"
            }
        }
    },
    "getMoreParameters": {
        "definition": {
            "qs": {},
            "url": "{{secrets.api_url}}/api/settings/sales_accounts/fields",
            "method": "get",
            "headers": {
                "Authorization": "Token token={{secrets.api_key}}"
            },
            "response": {
                "error": {
                    "code": "{{response.data.errors.code}}",
                    "message": "{{response.data.errors.message}}"
                },
                "output": "{{response.data.fields}}"
            },
            "transform": {
                "output": "const result = output.sort((a, b) => a.position - b.position).map((ele) => { const excludeParameters = [ 'phone_numbers', 'sales_accounts', 'active_sales_sequences', 'last_contacted', 'last_contacted_mode', 'last_contacted_sales_activity_mode', 'last_contacted_via_sales_activity', 'completed_sales_sequences', 'last_seen', 'lead_score', 'recent_note', 'creater_id', 'created_at', 'updater_id', 'updated_at', 'web_form_ids', 'last_assigned_at', ]; if (!excludeParameters.includes(ele.name)) { const typeMap = { text: 'text', textarea: 'textarea', dropdown: 'select', auto_complete: 'multitext', multi_select_dropdown: 'multiselect', radio: 'select', number: 'number', }; const placeholderPrefix = ['select', 'multiselect', 'radio'].includes( typeMap[ele.type] ) ? 'Select' : 'Enter'; const requiredParameters = ['emails', 'first_name']; const newObj = { name: ele.name, meta: { displayName: ele.label, displayType: typeMap[ele.type] || 'text', placeholder: `${placeholderPrefix} ${ele.label}`, validation: { required: requiredParameters.includes(ele.name) || ele.required, }, }, }; if (['dropdown', 'radio', 'multi_select_dropdown'].includes(ele.type)) { newObj.meta.htmlProps = { allowDynamic: true }; if (ele.choices && ele.choices.length) { newObj.meta.options = ele.choices.map((choice) => ({ label: choice.value, value: choice.id, })); } else { newObj.meta.displayType = 'text'; } if (ele.type === 'multi_select_dropdown') { newObj.meta.value = []; } } if (ele.default === false) { newObj.prop = 'custom_field'; } return newObj; } return null; }).filter((ele) => ele !== null); let custom_field = { name: 'custom_field', meta: { children: [], displayType: 'object', }, }; const outputWithCustomField = result.reduce((acc, ele) => { if (ele.prop === 'custom_field') { custom_field.meta.children.push(ele); } else { acc.push(ele); } return acc; }, []); if (custom_field.meta.children.length > 0) { outputWithCustomField.push(custom_field); } return outputWithCustomField"
            }
        }
    },
    "definition": {
        "qs": {},
        "url": "{{secrets.api_url}}/api/sales_accounts/{{parameters.id}}",
        "body": {},
        "method": "delete",
        "headers": {
            "Authorization": "Token token={{secrets.api_key}}"
        },
        "response": {
            "error": {
                "code": "{{response.data.errors.code}}",
                "message": "{{response.data.errors.message}}"
            },
            "output": "{{response.data}}"
        }
    },
    "config": {
        "url": "integrations/parameters",
        "body": {
            "name": "freshsales",
            "secret": "{{parameters.secret}}",
            "resource": "account",
            "loadParametersMethod": "getMoreParameters"
        },
        "method": "post",
        "urlType": "parameters"
    }
}
